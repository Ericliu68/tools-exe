version: '3.8'
services:
  zookeeper1:
    image: zookeeper:3.8.0
    container_name: zookeeper1
    volumes:
      - ${ZOOKEEPER_PATH_1}/data:/data
      - ${ZOOKEEPER_PATH_1}/config:/conf
      - ${ZOOKEEPER_PATH_1}/datalog:/datalog
      - ${ZOOKEEPER_PATH_1}/logs:/logs
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
    ports:
      - ${ZOOKEEPER_PORT_1}:2181
    restart: always
  zookeeper2:
    image: zookeeper:3.8.0
    container_name: zookeeper2
    volumes:
      - ${ZOOKEEPER_PATH_2}/data:/data
      - ${ZOOKEEPER_PATH_2}/config:/conf
      - ${ZOOKEEPER_PATH_2}/datalog:/datalog
      - ${ZOOKEEPER_PATH_2}/logs:/logs
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
    ports:
      - ${ZOOKEEPER_PORT_2}:2181
    restart: always
  zookeeper3:
    image: zookeeper:3.8.0
    container_name: zookeeper3
    volumes:
      - ${ZOOKEEPER_PATH_3}/data:/data
      - ${ZOOKEEPER_PATH_3}/config:/conf
      - ${ZOOKEEPER_PATH_3}/datalog:/datalog
      - ${ZOOKEEPER_PATH_3}/logs:/logs
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
    ports:
      - ${ZOOKEEPER_PORT_3}:2181
    restart: always

  kafka1:
    image: wurstmeister/kafka
    container_name: kafka1
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports: 
      - ${KAFKA_PORT_1}:${KAFKA_PORT_1}
    volumes:
      - ${KAFKA_PATH_1}/data:/kafka
      - ${KAFKA_PATH_1}/config:/opt/kafka/secrets/
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://${LOCAL_IP}:${KAFKA_PORT_1}
      KAFKA_ADVERTISED_PORT: ${KAFKA_PORT_1} 
      KAFKA_LISTENERS: SASL_PLAINTEXT://0.0.0.0:${KAFKA_PORT_1}
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT
      KAFKA_PORT: ${KAFKA_PORT_1}
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.auth.SimpleAclAuthorizer
      KAFKA_SUPER_USERS: User:admin
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true" #设置为true，ACL机制为黑名单机制，只有黑名单中的用户无法访问，默认为false，ACL机制为白名单机制，只有白名单中的用户可以访问
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OPTS: -Djava.security.auth.login.config=/opt/kafka/secrets/server_jaas.conf
    restart: always
  
  kafka2:
    image: wurstmeister/kafka
    container_name: kafka2
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports: 
      - ${KAFKA_PORT_2}:${KAFKA_PORT_2}
    volumes:
      - ${KAFKA_PATH_2}/data:/kafka
      - ${KAFKA_PATH_2}/config:/opt/kafka/secrets/
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://${LOCAL_IP}:${KAFKA_PORT_2}
      KAFKA_ADVERTISED_PORT: ${KAFKA_PORT_2}
      KAFKA_LISTENERS: SASL_PLAINTEXT://0.0.0.0:${KAFKA_PORT_2}
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT
      KAFKA_PORT: ${KAFKA_PORT_2}
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.auth.SimpleAclAuthorizer
      KAFKA_SUPER_USERS: User:admin
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true" #设置为true，ACL机制为黑名单机制，只有黑名单中的用户无法访问，默认为false，ACL机制为白名单机制，只有白名单中的用户可以访问
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OPTS: -Djava.security.auth.login.config=/opt/kafka/secrets/server_jaas.conf
    restart: always
  
  kafka3:
    image: wurstmeister/kafka
    container_name: kafka3
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports: 
      - ${KAFKA_PORT_3}:${KAFKA_PORT_3}
    volumes:
      - ${KAFKA_PATH_3}/data:/kafka
      - ${KAFKA_PATH_3}/config:/opt/kafka/secrets/
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://${LOCAL_IP}:${KAFKA_PORT_3}
      KAFKA_ADVERTISED_PORT: ${KAFKA_PORT_3}
      KAFKA_LISTENERS: SASL_PLAINTEXT://0.0.0.0:${KAFKA_PORT_3}
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT
      KAFKA_PORT: ${KAFKA_PORT_3}
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.auth.SimpleAclAuthorizer
      KAFKA_SUPER_USERS: User:admin
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true" #设置为true，ACL机制为黑名单机制，只有黑名单中的用户无法访问，默认为false，ACL机制为白名单机制，只有白名单中的用户可以访问
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OPTS: -Djava.security.auth.login.config=/opt/kafka/secrets/server_jaas.conf
    restart: always

