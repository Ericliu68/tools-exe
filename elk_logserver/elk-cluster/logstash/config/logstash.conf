# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
  http {
    host => "0.0.0.0"
    port => 8888
    codec => "json"
    user => "${REAL_TIME_LOGSTASH}"
    password => "${REAL_TIME_LOGSTASH_PASSWORD}"
    ecs_compatibility => disabled
    add_field => {"myid" => "tcp" }
    threads => 2
  }

  http {
    host => "0.0.0.0"
    port => 8889
    codec => json
    user => "${FILE_LOGSRASH}"
    password => "${FILE_LOGSRASH_PASSWORD}"
    ecs_compatibility => disabled
    add_field => {"myid" => "tcp_file" }
    threads => 2
  }

  beats {
    host => "0.0.0.0"
    port => 5086
    add_field => {"myid" => "beat"}
  }
}

filter {
    if [myid] == "beat" {
        ruby {
            code => "event.set('datetime', event.get('@timestamp').time.localtime + 8*60*60)"
        }
        ruby {
            code => "event.set('@timestamp', event.get('datetime'))"
        }
    }
    if [myid] == "file"{
        grok {
            match => { "message" => '%{TIMESTAMP_ISO8601:datetime} %{LOGLEVEL:level} %{NUMBER:app_id} %{NUMBER:request_id} %{DATA:customer_id} %{GREEDYDATA:mes}'}
        }
        date {
            match => ["datetime", "yyyy-MM-dd'T'HH:mm:ss"]
            target => "@timestamp"
        }
    }
    if [myid] == "tcp" {
        ruby {
            code => "event.set('timestamp', event.get('@timestamp').time.localtime + 8*60*60)"
        }
        ruby {
            code => "event.set('datetime', event.get('[extra][datetime]'))"
        }
        date {
            match => ["datetime", "yyyy-MM-dd'T'HH:mm:ss"]
            target => "@timestamp"
        }
        ruby {
            code => "event.set('app_id', event.get('[extra][logger_name]'))"
        }
        ruby{
            code => "event.set('request_id', event.get('[extra][request_id]'))"
        }
        ruby{
            code => "event.set('customer_id', event.get('[extra][customer_id]'))"
        }
        ruby{
            code => "
            event.get('[extra]').to_hash.each do |k, v|
            unless ['interpreter_version', 'logger_name', 'path', 'logstash_async_version', 'interpreter', 'thread_name', 'process_name', 'func_name', 'line'].include? k then
                        event.set(k, v)
            end
            end"

        }
    }

    if [myid] == "tcp_file" {
        mutate {
            remove_field => ["level"]
        }
        grok {
            match => { "message" => '%{TIMESTAMP_ISO8601:datetime} %{LOGLEVEL:level} %{DATA:app_id} %{DATA:request_id} %{DATA:customer_id} %{GREEDYDATA:mes}'}
        }
        date {
            match => ["datetime", "yyyy-MM-dd'T'HH:mm:ss"]
            target => "@timestamp"
         }
        ruby{
            code => "event.set('message', event.get('mes'))"
        }
    }

    mutate {
        remove_field => ["datetime"]
        remove_field => ["type"]
        remove_field => ["host"]
        remove_field => ["tags"]
        remove_field => ["logsource"]
        remove_field => ["program"]
        remove_field => ["pid"]
        remove_field => ["extra"]
        remove_field => ["headers"]
        remove_field => ["mes"]
        remove_field => ["event"]
    }
}

output {
  if [myid] == "beat"{
    elasticsearch {
        hosts => ["http://elasticsearch01:9200"]
        index => "beats-system-%{+YYYY.MM.dd}"
        user => "elastic"
        password => "${ES_PASSWORD}"
    }
  }
  else {
    elasticsearch {
        hosts => ["http://elasticsearch01:9200"]
        index => "log-%{+YYYY.MM.dd}"
        user => "elastic"
        password => "${ES_PASSWORD}"
    }
  }
  stdout{
       codec => rubydebug
  }
}
